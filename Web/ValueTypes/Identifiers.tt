﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.ComponentModel;
using Saithe;

namespace SomeBasicEFApp.Web
{

<#
var types = new []{
    new {Name="CustomerId", Prefix="C-"}, 
    new {Name="OrderId", Prefix="O-"},
    new {Name= "ProductId", Prefix="P-"}};
foreach (var typeT in types){
var type =typeT.Name;
var prefix = typeT.Prefix;
#>
    [TypeConverter(typeof(ParseTypeConverter<<#= type #>>))]
    public struct <#= type #> : IEquatable<<#= type #>>
    {
        public readonly string Value;

        public <#= type #>(string value)
        {
            this.Value = value;
        }

        public readonly static <#= type #> Empty = new <#= type #>();

        public bool Equals(<#= type #> other)
        {
            if (ReferenceEquals(null, other)) return false;
            return Equals(Value, other.Value);
        }
        public override bool Equals(object obj)
        {
            if (obj is CustomerId)
                return Equals((<#= type #>)obj);
            return false;
        }
        public override int GetHashCode()
        {
            return Value != null
                ? Value.GetHashCode()
                : 0;
        }
        public override string ToString()
        {
            return $"<#= prefix #>{Value}";
        }
        public static <#= type #> Parse(string value)
        {
            if (string.IsNullOrEmpty(value))
                throw new ArgumentException("Missing value");
            if (!value.StartsWith("<#= prefix #>", StringComparison.InvariantCultureIgnoreCase))
                throw new FormatException($"Expected '{value}' to start with prefix '<#= prefix #>'");
            return new <#= type #>(value.Substring("<#= prefix #>".Length));
        }
        public static bool operator ==(<#= type #> a, <#= type #> b)
        {
            return a.Equals(b);
        }
        public static bool operator !=(<#= type #> a, <#= type #> b)
        {
            return !(a == b);
        }
    }
<#
}
#>
}
